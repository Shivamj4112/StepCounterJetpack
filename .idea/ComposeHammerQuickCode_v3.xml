<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="com.ivyapps.composehammer.persistence.CustomComponentsPersistence">
    <option name="configuration" value="{&quot;projects&quot;:[{&quot;name&quot;:&quot;TextFieldWithoutUnderline&quot;,&quot;order&quot;:0.0,&quot;groups&quot;:[{&quot;name&quot;:&quot;CustomEdit&quot;,&quot;order&quot;:0.0,&quot;codeItems&quot;:[{&quot;name&quot;:&quot;EditText&quot;,&quot;imports&quot;:[&quot;androidx.compose.runtime.mutableStateOf&quot;,&quot;androidx.compose.ui.Modifier&quot;,&quot;androidx.compose.ui.graphics.Color&quot;,&quot;androidx.compose.foundation.rememberScrollState&quot;,&quot;androidx.compose.runtime.remember&quot;,&quot;androidx.compose.runtime.getValue&quot;,&quot;androidx.compose.foundation.layout.fillMaxWidth&quot;,&quot;androidx.compose.material3.TextField&quot;,&quot;androidx.compose.foundation.shape.RoundedCornerShape&quot;],&quot;codeTemplate&quot;:&quot;var isPasswordVisible by remember { mutableStateOf(false) }     val textState = remember { mutableStateOf(\&quot;\&quot;) }      TextField(         modifier = Modifier             .fillMaxWidth()             .padding(all = padding)             .padding(                 start = paddingStart,                 top = paddingTop,                 end = paddingEnd,                 bottom = paddingBottom             )             .padding(horizontal = paddingHorizontal, vertical = paddingVertical),         shape = RoundedCornerShape(12.sdp),         colors = TextFieldDefaults.textFieldColors(             disabledTextColor = Color.Transparent,             focusedIndicatorColor = Color.Transparent,             unfocusedIndicatorColor = Color.Transparent,             disabledIndicatorColor = Color.Transparent         ),          keyboardOptions = KeyboardOptions.Default.copy(keyboardType = keyboardType),         value = textState.value,         onValueChange = {             textState.value = it             onTextChange(it)         },          singleLine = true,          placeholder = {             SimpleTextComponent(text = hint)         },         visualTransformation = if (keyboardType == KeyboardType.Password &amp;&amp; !isPasswordVisible) {             PasswordVisualTransformation()         } else {             VisualTransformation.None         },         trailingIcon = {             if (keyboardType == KeyboardType.Password) {                 val icon = if (isPasswordVisible) {                     painterResource(id = R.drawable.ic_hide)                 } else {                     painterResource(id = R.drawable.ic_visible)                 }                 IconButton(onClick = { isPasswordVisible = !isPasswordVisible }) {                     Icon(                         icon,                         contentDescription = \&quot;Toggle Password Visibility\&quot;,                         Modifier.size(width = 20.sdp, height = 20.sdp)                     )                 }             }         }     )&quot;,&quot;order&quot;:0.0}]}]}]}" />
  </component>
</project>